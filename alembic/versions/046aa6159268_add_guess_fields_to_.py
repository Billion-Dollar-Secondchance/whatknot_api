"""Add guess fields to MysteryMoodboxPromptedQuestion

Revision ID: 046aa6159268
Revises: 0a38ae1617ac
Create Date: 2025-05-04 14:59:47.384577

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '046aa6159268'
down_revision: Union[str, None] = '0a38ae1617ac'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('mystery_moodbox')
    op.add_column('mystery_moodbox_prompted_questions', sa.Column('guesser_id', sa.String(), nullable=True))
    op.add_column('mystery_moodbox_prompted_questions', sa.Column('guess_text', sa.Text(), nullable=True))
    op.add_column('mystery_moodbox_prompted_questions', sa.Column('guessed_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.create_foreign_key(None, 'mystery_moodbox_prompted_questions', 'users', ['guesser_id'], ['user_id'], ondelete='SET NULL')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'mystery_moodbox_prompted_questions', type_='foreignkey')
    op.drop_column('mystery_moodbox_prompted_questions', 'guessed_at')
    op.drop_column('mystery_moodbox_prompted_questions', 'guess_text')
    op.drop_column('mystery_moodbox_prompted_questions', 'guesser_id')
    op.create_table('mystery_moodbox',
    sa.Column('mood_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('pair_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('prompt_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('prompt_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('prompted_user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('mood', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('explanation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('mood_status', postgresql.ENUM('prompted', 'answered', 'guessed', 'responded', 'expired', name='moodstatusenum'), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('guesser_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('guess_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('guessed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['pair_id'], ['partner_pairing.pair_id'], name='mystery_moodbox_pair_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['question_id'], ['mystery_moodbox_questions.question_id'], name='mystery_moodbox_question_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('mood_id', name='mystery_moodbox_pkey')
    )
    # ### end Alembic commands ###
