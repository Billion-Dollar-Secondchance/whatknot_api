"""Fix: Rename primary key to vibe_response_id

Revision ID: b0359355ff7a
Revises: 8d7be88b7f31
Create Date: 2025-05-20 01:35:50.668660

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b0359355ff7a'
down_revision: Union[str, None] = '8d7be88b7f31'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('vibe_match_questions')
    op.alter_column('mystery_moodbox_date_mapping', 'pair_days_condition',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('single_vibe_prompt_response', sa.Column('vibe_response_id', sa.String(), nullable=False))
    op.alter_column('single_vibe_prompt_response', 'prompt_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('single_vibe_prompt_response', 'user_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_foreign_key(None, 'single_vibe_prompt_response', 'single_vibe_prompts', ['prompt_id'], ['prompt_id'])
    op.drop_column('single_vibe_prompt_response', 'response_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('single_vibe_prompt_response', sa.Column('response_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'single_vibe_prompt_response', type_='foreignkey')
    op.alter_column('single_vibe_prompt_response', 'user_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('single_vibe_prompt_response', 'prompt_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('single_vibe_prompt_response', 'vibe_response_id')
    op.alter_column('mystery_moodbox_date_mapping', 'pair_days_condition',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_table('vibe_match_questions',
    sa.Column('vibe_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('vibe_match_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('order_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['vibe_questions.question_id'], name='vibe_match_questions_question_id_fkey'),
    sa.ForeignKeyConstraint(['vibe_match_id'], ['vibe_matches.vibe_match_id'], name='vibe_match_questions_vibe_match_id_fkey'),
    sa.PrimaryKeyConstraint('vibe_id', name='vibe_match_questions_pkey')
    )
    # ### end Alembic commands ###
